import os
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, 
    CommandHandler, 
    ContextTypes, 
    ConversationHandler, 
    MessageHandler, 
    filters
)
from flask import Flask, request
from faker import Faker
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
NAME, AGE, GENDER, CITY, PHOTO = range(5)

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–µ–π–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
fake = Faker('ru_RU')

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç
user_profiles = {}
matches = {}

# Flask –¥–ª—è webhook
flask_app = Flask(__name__)

class DatingBot:
    def __init__(self, token):
        self.token = token
        self.application = Application.builder().token(token).build()

    async def set_webhook(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
        webhook_url = os.getenv('WEBHOOK_URL', 'https://dating-production.up.railway.app')
        full_webhook_url = f"{webhook_url}/{self.token}"
        
        logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é webhook: {full_webhook_url}")
        await self.application.bot.set_webhook(
            url=full_webhook_url,
            allowed_updates=Update.ALL_TYPES
        )
        logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")

    def run_webhook(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ webhook"""
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.save_name)],
                AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.save_age)],
                GENDER: [MessageHandler(filters.Regex('^(–ú—É–∂—Å–∫–æ–π|–ñ–µ–Ω—Å–∫–∏–π)$'), self.save_gender)],
                CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.save_city)],
                PHOTO: [MessageHandler(filters.PHOTO, self.save_photo)]
            },
            fallbacks=[CommandHandler('cancel', lambda u, c: ConversationHandler.END)]
        )

        self.application.add_handler(conv_handler)
        self.application.add_handler(CommandHandler('match', self.generate_match))

        return self.application

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
        )
        return NAME

    async def save_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.message.from_user
        user_profiles[user.id] = {"name": update.message.text}
        
        await update.message.reply_text(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {update.message.text}! –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
        return AGE

    async def save_age(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç"""
        try:
            age = int(update.message.text)
            if 18 <= age <= 65:
                user = update.message.from_user
                user_profiles[user.id]["age"] = age
                
                keyboard = [['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π']]
                reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", 
                    reply_markup=reply_markup
                )
                return GENDER
            else:
                await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 18 –¥–æ 65. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
                return AGE
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
            return AGE

    async def save_gender(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª"""
        user = update.message.from_user
        user_profiles[user.id]["gender"] = update.message.text
        
        await update.message.reply_text("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –∂–∏–≤—ë—à—å?")
        return CITY

    async def save_city(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥"""
        user = update.message.from_user
        user_profiles[user.id]["city"] = update.message.text
        
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∫–µ—Ç—ã. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –±–æ–ª—å—à–µ –æ—Ç–∫–ª–∏–∫–æ–≤!",
            reply_markup=ReplyKeyboardRemove()
        )
        return PHOTO

    async def save_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ"""
        user = update.message.from_user
        photo_file = await update.message.photo[-1].get_file()
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        user_profiles[user.id]["photo_id"] = photo_file.file_id
        
        await update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! üéâ")
        return ConversationHandler.END

    async def generate_match(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"""
        user = update.message.from_user
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–Ω–∫–µ—Ç—ã –ø–æ –ø–æ–ª—É (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π)
        current_user = user_profiles.get(user.id, {})
        opposite_gender = '–ñ–µ–Ω—Å–∫–∏–π' if current_user.get('gender') == '–ú—É–∂—Å–∫–æ–π' else '–ú—É–∂—Å–∫–æ–π'
        
        potential_matches = [
            profile for uid, profile in user_profiles.items() 
            if uid != user.id and profile.get('gender') == opposite_gender
        ]
        
        if potential_matches:
            match = fake.random.choice(potential_matches)
            
            await update.message.reply_text(
                f"üî• –¢–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ç—á:\n\n"
                f"–ò–º—è: {match['name']}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {match['age']}\n"
                f"–ì–æ—Ä–æ–¥: {match['city']}"
            )
            
            if 'photo_id' in match:
                await update.message.reply_photo(match['photo_id'])
        else:
            await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")

# Flask route –¥–ª—è webhook
@flask_app.route(f'/{os.getenv("TELEGRAM_BOT_TOKEN")}', methods=['POST'])
async def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook"""
    bot_instance = DatingBot(os.getenv('TELEGRAM_BOT_TOKEN'))
    bot_app = bot_instance.run_webhook()
    
    update = Update.de_json(request.get_json(force=True), bot_app.bot)
    await bot_app.process_update(update)
    return 'OK'

@flask_app.route('/', methods=['GET'])
def home():
    return "üíò LoveSwipe Telegram Bot üíò"

def main():
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        logger.error("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞!")
        return
    
    bot = DatingBot(token)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    import asyncio
    asyncio.run(bot.set_webhook())

if __name__ == '__main__':
    flask_app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000))) 